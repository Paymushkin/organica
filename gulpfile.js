const { src, dest, watch, series, parallel, task } = require('gulp');
const pug = require('gulp-pug');
const sass = require('gulp-sass')(require('sass'));
const autoprefixer = require('gulp-autoprefixer');
const cleanCSS = require('gulp-clean-css');
const concat = require('gulp-concat');
const uglify = require('gulp-uglify');
const imagemin = require('gulp-imagemin');
const webp = require('gulp-webp');
const rename = require('gulp-rename');
const sourcemaps = require('gulp-sourcemaps');
const browserSync = require('browser-sync').create();
const del = require('del');
const plumber = require('gulp-plumber');
const gulpif = require('gulp-if');
const changed = require('gulp-changed');
const cache = require('gulp-cached');
const remember = require('gulp-remember');
const os = require('os');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const env = process.env.env || 'development';
const isProduction = env === 'production';
const isDevelopment = env === 'development';

console.log(`üöÄ –†–µ–∂–∏–º —Å–±–æ—Ä–∫–∏: ${env}`);

// –ü—É—Ç–∏
const paths = {
  src: {
    pug: 'src/pug/**/*.pug',
    scss: 'src/scss/**/*.scss',
    js: 'src/js/**/*.js',
    images: 'src/images/**/*.{jpg,jpeg,png,gif,svg}',
    fonts: 'src/fonts/**/*'
  },
  dist: {
    html: 'dist/',
    css: 'dist/css/',
    js: 'dist/js/',
    images: 'dist/images/',
    fonts: 'dist/fonts/'
  },
  cache: {
    images: '.cache/images',
    fonts: '.cache/fonts'
  }
};

// –û—á–∏—Å—Ç–∫–∞
function clean() {
  return del(['dist/**/*', '.cache/**/*']);
}

// Pug
function compilePug() {
  return src('src/pug/pages/*.pug')
    .pipe(plumber())
    .pipe(pug({
      pretty: !isProduction
    }))
    .pipe(dest(paths.dist.html));
}

// SCSS
function compileSCSS() {
  return src('src/scss/main.scss')
    .pipe(plumber())
    .pipe(gulpif(isDevelopment, sourcemaps.init()))
    .pipe(sass({
      api: 'modern-compiler', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API
      quietDeps: true, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      silenceDeprecations: ['legacy-js-api', 'import'] // –û—Ç–∫–ª—é—á–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    }).on('error', sass.logError))
    .pipe(autoprefixer())
    .pipe(gulpif(isProduction, cleanCSS()))
    .pipe(gulpif(isDevelopment, sourcemaps.write('.')))
    .pipe(dest(paths.dist.css));
}

// JavaScript
function compileJS() {
  return src([
    'src/js/libraries/swiper.min.js',
    'src/js/**/*.js'
  ])
    .pipe(plumber())
    .pipe(gulpif(isDevelopment, sourcemaps.init()))
    .pipe(concat('main.js'))
    .pipe(gulpif(isProduction, uglify()))
    .pipe(gulpif(isDevelopment, sourcemaps.write('.')))
    .pipe(dest(paths.dist.js));
}

// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function optimizeImages() {
  return src(paths.src.images)
    .pipe(plumber())
    .pipe(gulpif(isDevelopment, changed(paths.dist.images)))
    .pipe(gulpif(isDevelopment, cache('images')))
    .pipe(dest(paths.dist.images))
    .pipe(gulpif(isDevelopment, remember('images')));
}

// WebP —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function createWebP() {
  return src('src/images/**/*.{jpg,jpeg,png}')
    .pipe(plumber())
    .pipe(gulpif(isDevelopment, changed(paths.dist.images)))
    .pipe(gulpif(isDevelopment, cache('webp')))
    .pipe(webp({ quality: 80 }))
    .pipe(dest(paths.dist.images))
    .pipe(gulpif(isDevelopment, remember('webp')));
}

// –®—Ä–∏—Ñ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function copyFonts() {
  return src(paths.src.fonts)
    .pipe(plumber())
    .pipe(gulpif(isDevelopment, changed(paths.dist.fonts)))
    .pipe(gulpif(isDevelopment, cache('fonts')))
    .pipe(dest(paths.dist.fonts))
    .pipe(gulpif(isDevelopment, remember('fonts')));
}

// CSS –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
function copyCSSLibs() {
  return src('src/scss/*.css')
    .pipe(plumber())
    .pipe(dest(paths.dist.css));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞
function getLocalIP() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }
  return 'localhost';
}

// Browser Sync
function serve() {
  const localIP = getLocalIP();
  
  browserSync.init({
    server: {
      baseDir: 'dist'
    },
    notify: false,
    open: false,
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    host: '0.0.0.0', // –î–æ—Å—Ç—É–ø –∏–∑ –ª—é–±–æ–π —Å–µ—Ç–∏
    port: 3000,
    // –í–∫–ª—é—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
    ui: {
      port: 3001
    },
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    tunnel: false, // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    logLevel: 'info',
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    reloadOnRestart: true,
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    codeSync: true,
    // –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    notify: {
      styles: {
        top: 'auto',
        bottom: '0'
      }
    }
  }, () => {
    console.log('\nüåê –î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É:');
    console.log(`üì± –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: http://${localIP}:3000`);
    console.log(`üíª –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://localhost:3000`);
    console.log(`‚öôÔ∏è  –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: http://localhost:3001`);
    console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –æ–¥–Ω–æ–π Wi-Fi —Å–µ—Ç–∏');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ/–ø–ª–∞–Ω—à–µ—Ç–µ');
    console.log(`3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://${localIP}:3000`);
    console.log('\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n');
  });
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function watchFiles() {
  // Pug
  watch(paths.src.pug, series(compilePug))
    .on('change', browserSync.reload);
  
  // SCSS
  watch(paths.src.scss, series(compileSCSS))
    .on('change', browserSync.reload);
  
  // JS
  watch(paths.src.js, series(compileJS))
    .on('change', browserSync.reload);
  
  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
  if (isDevelopment) {
    watch(paths.src.images, series(optimizeImages, createWebP))
      .on('change', browserSync.reload);
  }
  
  // –®—Ä–∏—Ñ—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
  if (isDevelopment) {
    watch(paths.src.fonts, series(copyFonts))
      .on('change', browserSync.reload);
  }
}

// –ó–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
task('build:fonts', copyFonts);
task('build:images', series(optimizeImages, createWebP));

// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
const build = series(
  clean,
  parallel(
    compilePug,
    compileSCSS,
    compileJS,
    optimizeImages,
    createWebP,
    copyFonts,
    copyCSSLibs
  )
);

// –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
const dev = series(
  build,
  parallel(serve, watchFiles)
);

// –¢–æ–ª—å–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
const watchOnly = series(
  build,
  watchFiles
);

// –¢–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä
const serveOnly = series(
  build,
  serve
);

// –≠–∫—Å–ø–æ—Ä—Ç
exports.clean = clean;
exports.build = build;
exports.dev = dev;
exports.watch = watchOnly;
exports.serve = serveOnly;
exports['build:fonts'] = copyFonts;
exports['build:images'] = series(optimizeImages, createWebP);
exports.default = dev;